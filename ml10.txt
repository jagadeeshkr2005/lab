import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 2: Load the Breast Cancer dataset
data = load_breast_cancer()

# Step 3: Feature Scaling
X = StandardScaler().fit_transform(data.data)

# Step 4: Extract target labels
y = data.target  # 0 = malignant, 1 = benign

# Step 5: Apply K-Means Clustering
kmeans = KMeans(n_clusters=2, random_state=42)
labels = kmeans.fit_predict(X)

# Step 6: Evaluate the clustering performance
print(f"Accuracy of K-Means clustering: {accuracy_score(y, labels) * 100:.2f}%")
print("\nConfusion Matrix:\n", confusion_matrix(y, labels))
print("\nClassification Report:\n", classification_report(y, labels))

# Step 7: Reduce dimensions using PCA
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X)

# Step 8: Project cluster centroids into PCA space
centroids_pca = pca.transform(kmeans.cluster_centers_)

# Step 9: Visualize the true labels and K-Means results
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
titles = ['True Labels', 'K-Means Clustering']

for ax, data_labels, title in zip(axes, [y, labels], titles):
    ax.scatter(X_pca[:, 0], X_pca[:, 1], c=data_labels, cmap='coolwarm', alpha=0.7)
    ax.set(title=title, xlabel='PCA Component 1', ylabel='PCA Component 2')
    ax.grid(True)

axes[1].scatter(*centroids_pca.T, marker='X', s=200, c='black', label='Centroids')
axes[1].legend()

plt.tight_layout()
plt.show()