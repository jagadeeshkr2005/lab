import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

# Step 1: Generate 100 random values in the range [0,1]
n_samples = 100
np.random.seed(42)
x_values = np.random.rand(n_samples)

# Step 2: Label the first 50 points
labels = np.where(x_values[:50] <= 0.5, "Class1", "Class2")

# Print x_values and labels
print("Generated x_values:")
print(x_values)
print("\nAssigned labels for first 50 points:")
print(labels)

# Step 3: Define the KNN function
def knn_classify(x_train, y_train, x_test, k):
    predictions = []
    for x in x_test:
        distances = np.abs(x_train - x)
        k_nearest_labels = y_train[np.argsort(distances)[:k]]
        predictions.append(Counter(k_nearest_labels).most_common(1)[0][0])
    return np.array(predictions)

# Step 4: Classify the remaining 50 points using KNN for different k values
k_values = [1, 2, 3, 4, 5, 20, 30]
results = {k: knn_classify(x_values[:50], labels, x_values[50:], k) for k in k_values}

# Step 5: Print classification results
for k, preds in results.items():
    print(f"\nResults for k={k}:")
    print(preds)

# Step 6: Visualization
plt.figure(figsize=(10, 6))
for k in k_values:
    plt.scatter(x_values[50:], [k] * 50, c=["blue" if lbl == "Class1" else "red" for lbl in results[k]], label=f"k={k}", marker='o')

plt.xlabel("x values")
plt.ylabel("k values (for visualization)")
plt.title("KNN Classification Results for Different k Values")
plt.colorbar(label="Predicted Class")
plt.legend()
plt.show()